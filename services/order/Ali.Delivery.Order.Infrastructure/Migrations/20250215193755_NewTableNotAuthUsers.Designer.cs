// <auto-generated />
using System;
using Ali.Delivery.Order.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ali.Delivery.Order.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250215193755_NewTableNotAuthUsers")]
    partial class NewTableNotAuthUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Dictionaries.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_order_statuses");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_order_statuses_code");

                    b.ToTable("order_statuses", null, t =>
                        {
                            t.HasComment("Справочник статусов заказов");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a174d9d-c0e0-b9f8-286f-aa381bbf2d0a"),
                            Code = "created",
                            Name = "Создана"
                        },
                        new
                        {
                            Id = new Guid("3a174d9d-c0e1-358f-01db-927e1290e9f1"),
                            Code = "inProgress",
                            Name = "В процессе"
                        },
                        new
                        {
                            Id = new Guid("3a174d9d-c0df-65fa-4178-e9b514ce133d"),
                            Code = "finished",
                            Name = "Завершена"
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Dictionaries.PassportType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код типа паспорта");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name")
                        .HasComment("Наименование типа паспорта");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_passport_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_passport_types_code");

                    b.ToTable("passport_types", null, t =>
                        {
                            t.HasComment("Справочник типов паспортов");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a15d9e1-c9a0-80ab-eac9-9369b2ace783"),
                            Code = "internal",
                            Name = "Внутренний"
                        },
                        new
                        {
                            Id = new Guid("3a15d9e1-c9a1-8b19-64f4-8cb3007b8a5d"),
                            Code = "international",
                            Name = "Заграничный"
                        },
                        new
                        {
                            Id = new Guid("3a15d9e1-c99f-95c5-162b-34f69121c4a1"),
                            Code = "diplomatic",
                            Name = "Дипломатический"
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Dictionaries.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_code");

                    b.ToTable("permissions", null, t =>
                        {
                            t.HasComment("Справочник доступа пользователей");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a17be54-4e84-3e77-9188-a292bac6366c"),
                            Code = 1000,
                            Name = "Доступ для работы с сущностью пользователя"
                        },
                        new
                        {
                            Id = new Guid("3a17be54-4e65-5dca-866e-f7cd3b8c49bb"),
                            Code = 1003,
                            Name = "Полный доступ"
                        },
                        new
                        {
                            Id = new Guid("3a17be54-4e81-b978-5d49-940a8c2da6ab"),
                            Code = 1002,
                            Name = "Доступ отслеживания заказов"
                        },
                        new
                        {
                            Id = new Guid("3a17be54-4e80-5c77-723b-dc0991c878da"),
                            Code = 1001,
                            Name = "Доступ для работы с заказами"
                        },
                        new
                        {
                            Id = new Guid("3a17be54-4e82-4bfb-f422-2caeb3389561"),
                            Code = 1004,
                            Name = "Доступ пользователя к работе с заказами"
                        },
                        new
                        {
                            Id = new Guid("3a17be54-4e83-e173-197a-4a19535ed222"),
                            Code = 1005,
                            Name = "Доступ курьера к работе с заказами"
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Dictionaries.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_roles_code");

                    b.ToTable("roles", null, t =>
                        {
                            t.HasComment("Справочник ролей пользователей");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a1537be-fa32-3962-f94d-62f95e6ffcad"),
                            Code = "courier",
                            Name = "Курьер"
                        },
                        new
                        {
                            Id = new Guid("3a1537bf-cabc-d70c-f42c-012821b898b1"),
                            Code = "basicUser",
                            Name = "Пользователь"
                        },
                        new
                        {
                            Id = new Guid("3a1537c0-11f8-d788-90d9-ced196c63397"),
                            Code = "notAuthUser",
                            Name = "Неавторизованный пользователь"
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Dictionaries.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code")
                        .HasComment("Код");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_sizes");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_sizes_code");

                    b.ToTable("sizes", null, t =>
                        {
                            t.HasComment("Справочник размеров");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a156e1f-6055-abfb-36b7-7e630cc807b9"),
                            Code = "small",
                            Name = "Маленький"
                        },
                        new
                        {
                            Id = new Guid("3a156e1f-6056-875d-e42d-3e8e7ec6e082"),
                            Code = "medium",
                            Name = "Средний"
                        },
                        new
                        {
                            Id = new Guid("3a156e1f-6057-39cd-7580-20395231a00f"),
                            Code = "large",
                            Name = "Большой"
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.NotAuthUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name")
                        .HasComment("Имя незарегистрированного пользователя");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name")
                        .HasComment("Фамилия незарегистрированного пользователя");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number")
                        .HasComment("Телефонный номер незарегистрированного пользователя");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_not_auth_users");

                    b.ToTable("not_auth_users", null, t =>
                        {
                            t.HasComment("Незарегистрированный пользователь");
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name")
                        .HasComment("Наименование заказа");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("courier_id")
                        .HasColumnType("uuid")
                        .HasColumnName("courier_id");

                    b.Property<Guid>("details_id")
                        .HasColumnType("uuid")
                        .HasColumnName("details_id")
                        .HasComment("Информация о заказе");

                    b.Property<Guid?>("not_auth_receiver_id")
                        .HasColumnType("uuid")
                        .HasColumnName("not_auth_receiver_id");

                    b.Property<Guid?>("receiver_id")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<Guid?>("sender_id")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<Guid>("status_id")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id")
                        .HasComment("Статус заказа");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("courier_id")
                        .HasDatabaseName("ix_orders_courier_id");

                    b.HasIndex("details_id")
                        .HasDatabaseName("ix_orders_details_id");

                    b.HasIndex("not_auth_receiver_id")
                        .HasDatabaseName("ix_orders_not_auth_receiver_id");

                    b.HasIndex("receiver_id")
                        .HasDatabaseName("ix_orders_receiver_id");

                    b.HasIndex("sender_id")
                        .HasDatabaseName("ix_orders_sender_id");

                    b.HasIndex("status_id")
                        .HasDatabaseName("ix_orders_status_id");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasComment("Заказ");
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.OrderInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("AddressFrom")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address_from")
                        .HasComment("Адрес отправления");

                    b.Property<string>("AddressTo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("address_to")
                        .HasComment("Адрес доставки");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price")
                        .HasComment("Цена заказа");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight")
                        .HasComment("Вес заказа");

                    b.Property<Guid>("size_id")
                        .HasColumnType("uuid")
                        .HasColumnName("size_id")
                        .HasComment("Идентификатор размера");

                    b.HasKey("Id")
                        .HasName("pk_order_details");

                    b.HasIndex("size_id")
                        .HasDatabaseName("ix_order_details_size_id");

                    b.ToTable("order_details", null, t =>
                        {
                            t.HasComment("Информация о заказе");
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.PassportInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("issued_by")
                        .HasComment("Кем выдан");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("passport_number")
                        .HasComment("Номер паспорта");

                    b.Property<DateTime>("RegDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date")
                        .HasComment("Дата регистрации");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.Property<Guid>("type_id")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id")
                        .HasComment("Идентификатор типа паспорта");

                    b.HasKey("Id")
                        .HasName("pk_passport");

                    b.HasIndex("type_id")
                        .HasDatabaseName("ix_passport_type_id");

                    b.ToTable("passport", null, t =>
                        {
                            t.HasComment("Информация о паспортах");
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasColumnOrder(1)
                        .HasComment("Идентификатор роли");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(2)
                        .HasComment("Идентификатор разрешения");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", null, t =>
                        {
                            t.HasComment("Отношение м:м ролей к разрешениям");
                        });

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("3a1537c0-11f8-d788-90d9-ced196c63397"),
                            PermissionId = new Guid("3a17be54-4e81-b978-5d49-940a8c2da6ab"),
                            Id = new Guid("3a17be5f-7bc6-ba8e-0f5d-b7192c99492b")
                        },
                        new
                        {
                            RoleId = new Guid("3a1537bf-cabc-d70c-f42c-012821b898b1"),
                            PermissionId = new Guid("3a17be54-4e82-4bfb-f422-2caeb3389561"),
                            Id = new Guid("3a17be5f-7b9c-0bc4-a94f-b0bba09fd370")
                        },
                        new
                        {
                            RoleId = new Guid("3a1537bf-cabc-d70c-f42c-012821b898b1"),
                            PermissionId = new Guid("3a17be54-4e81-b978-5d49-940a8c2da6ab"),
                            Id = new Guid("3a17be5f-7bbe-2559-4048-48a0196e0f25")
                        },
                        new
                        {
                            RoleId = new Guid("3a1537bf-cabc-d70c-f42c-012821b898b1"),
                            PermissionId = new Guid("3a17be54-4e84-3e77-9188-a292bac6366c"),
                            Id = new Guid("3a17be5f-7bbf-849a-7d45-02bd0f50536d")
                        },
                        new
                        {
                            RoleId = new Guid("3a1537be-fa32-3962-f94d-62f95e6ffcad"),
                            PermissionId = new Guid("3a17be54-4e83-e173-197a-4a19535ed222"),
                            Id = new Guid("3a17be5f-7bc0-509f-e1ec-2f10d0cebef0")
                        },
                        new
                        {
                            RoleId = new Guid("3a1537be-fa32-3962-f94d-62f95e6ffcad"),
                            PermissionId = new Guid("3a17be54-4e84-3e77-9188-a292bac6366c"),
                            Id = new Guid("3a17be5f-7bc1-6952-64c0-1c9ca8881fd0")
                        },
                        new
                        {
                            RoleId = new Guid("3a1537be-fa32-3962-f94d-62f95e6ffcad"),
                            PermissionId = new Guid("3a17be54-4e81-b978-5d49-940a8c2da6ab"),
                            Id = new Guid("3a17be5f-7bc2-9c5b-8a73-bcd6ce135188")
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasComment("Уникальный идентификатор");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_day")
                        .HasComment("Дата рождения пользователя");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name")
                        .HasComment("Фамилия пользователя");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("login")
                        .HasComment("Логин пользователя");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password")
                        .HasComment("Пароль пользователя");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("passport_info_id")
                        .HasColumnType("uuid")
                        .HasColumnName("passport_info_id")
                        .HasComment("Информация о паспорте");

                    b.Property<Guid>("role_id")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasComment("Роль пользователя");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_users_login");

                    b.HasIndex("passport_info_id")
                        .HasDatabaseName("ix_users_passport_info_id");

                    b.HasIndex("role_id")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователь");
                        });
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.Order", b =>
                {
                    b.HasOne("Ali.Delivery.Order.Domain.Entities.User", "Courier")
                        .WithMany()
                        .HasForeignKey("courier_id")
                        .HasConstraintName("fk_orders_users_courier_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.OrderInfo", "OrderInfo")
                        .WithMany()
                        .HasForeignKey("details_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_info_details_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.NotAuthUser", "NotAuthReceiver")
                        .WithMany()
                        .HasForeignKey("not_auth_receiver_id")
                        .HasConstraintName("fk_orders_not_auth_users_not_auth_receiver_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("receiver_id")
                        .HasConstraintName("fk_orders_users_receiver_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("sender_id")
                        .HasConstraintName("fk_orders_users_sender_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.Dictionaries.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_status_status_id");

                    b.Navigation("Courier");

                    b.Navigation("NotAuthReceiver");

                    b.Navigation("OrderInfo");

                    b.Navigation("OrderStatus");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.OrderInfo", b =>
                {
                    b.HasOne("Ali.Delivery.Order.Domain.Entities.Dictionaries.Size", "Size")
                        .WithMany()
                        .HasForeignKey("size_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_details_sizes_size_id");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.PassportInfo", b =>
                {
                    b.HasOne("Ali.Delivery.Order.Domain.Entities.Dictionaries.PassportType", "PassportType")
                        .WithMany()
                        .HasForeignKey("type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_passport_passport_types_type_id");

                    b.Navigation("PassportType");
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Ali.Delivery.Order.Domain.Entities.Dictionaries.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.Dictionaries.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Ali.Delivery.Order.Domain.Entities.User", b =>
                {
                    b.HasOne("Ali.Delivery.Order.Domain.Entities.PassportInfo", "PassportInfo")
                        .WithMany()
                        .HasForeignKey("passport_info_id")
                        .HasConstraintName("fk_users_passport_passport_info_id");

                    b.HasOne("Ali.Delivery.Order.Domain.Entities.Dictionaries.Role", "Role")
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("PassportInfo");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
